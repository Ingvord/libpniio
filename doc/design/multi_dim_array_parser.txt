Concept for a multidimensional array parser
===========================================

Motivation
----------

The current array parser is only capable of parsing 1D arrays using a single
start-symbol and  a single stop-symbol to indicate the beginning and end of an
array string. In addition a separator symbol is used to indicate the end of an
array element. 
As we are able to work with multidimensional arrays one should have a better
concept here. 

Basic considerations
--------------------

A multidimensional array would have a form like this (we assume that '[' and ']'
denote the start and stop symbol respectively and that ',' is used as a
separator symbol):

    [[1,2,3],
     [4,5,6],
     [7,8,9],
     [10,11,12]]

Which represents a 2D array of shape (4,3). The critical part aside from parsing
the numbers in the innermost part of the array is how to get the dimensions
right. 
We do not have to care about the dimensionality of the data as we can read it to
a linear buffer in the first place. We need to create a shape buffer where we
store the number of elements along each dimension. The tricky thing is to update
this shape buffer during parsing through the string. This means that we have to
move forward and backward in this buffer and increment its elements
appropriately. For this purpose we could use the start/stop symbols and the
separator symbol
For the above example

[ -> move one element to the right or create it if it does not exist: in all
     cases reset the element to 0
, -> increment current element counter
] -> increment current element and move one element to the left.

There is one critical point: when we reached ] for a particular dimension we are
done with it and do not have to recount again. However, this is somehow tricky
to implement this. Thus we just reset the element counter whenever we enter a
dimension again

Try this on the previous example
[ (create s0 = 0) 
[ (create s1 = 0) , (inc.s1=1) ,(inc. s1=2) ] (inc. s1=3, go to s0)
, (inc.s0 = 1)
[ (goto s1,s1=0) , ....................

I guess this should work. The question is just how easy it is to implement this. 

Would this design help us with implementing IO for nested.
