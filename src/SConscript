from os import path

Import("build_env")

src_list = ["NXObject.cpp","NXGroup.cpp","NXField.cpp"]

#compile sources
shared_objects = build_env.SharedObject(src_list)
static_objects = build_env.StaticObject(src_list)
(h5_shared_objects,h5_static_objects) = build_env.SConscript("h5/SConscript")
shared_objects.append(h5_shared_objects)
static_objects.append(h5_static_objects)

#build the shared library
lib_suffix = build_env["SHLIBSUFFIX"]+"."+build_env["SOVERSION"]+"."\
             +build_env["VERSION"]
temp_shared_library = build_env.SharedLibrary(build_env["LIBNAME"],
                                              shared_objects,
                                              so_version=build_env["SOVERSION"],
                                              SHLIBSUFFIX=lib_suffix+"noperm")
shared_library = build_env.Command(
                 build_env["LIBPREFIX"]+build_env["LIBNAME"]+lib_suffix,
                 temp_shared_library[0],
                 [  Move("$TARGET","$SOURCE"),
                    Chmod("$TARGET",0644)])
                    
#build the static library                    
static_library = build_env.StaticLibrary(build_env["LIBNAME"],static_objects)

#------------------------Package config file creation--------------------------
fname = build_env["LIBNAME"]+".pc"

#build the pkg-config file
pkg_source = ["prefix = %s" %(build_env["PREFIX"]),
              "exec_prefix = ${prefix}",
              "includedir = ${prefix}/include/pni/nx",
              "libdir = ${prefix}/lib","",
              "Name: %s" %(build_env["LIBNAME"]),
              "Description: PNI Nexus library",
              "Version: %s" %(build_env["VERSION"]),
              "Cflags: -I${includedir}",
              "Libs: -L${libdir} -l%s" %(build_env["LIBNAME"])]

pkg_config_file = build_env.Textfile(target=build_env["LIBNAME"],
                                     source=pkg_source,
                                     TEXTFILESUFFIX=".pc")


#-------------------------some build targets -----------------------------------
build_env.Alias("all",[temp_shared_library,shared_library,static_library,
                       pkg_config_file])
                       
build_env.Alias("library",[temp_shared_library,shared_library,static_library,
                           pkg_config_file])
                           
#--------------------------Installation targets--------------------------------
lib_inst_path = path.join(build_env["PREFIX"],"lib")
hdr_inst_path = path.join(build_env["PREFIX"],"include/pni/nx")

shared_library_install = build_env.Install(lib_inst_path,[shared_library])
static_library_install = build_env.Install(lib_inst_path,[static_library])

#after installing the shared library we need to create some links to the shared library file
#on Unix systems
lib_name = str(shared_library[0])
inst_path = path.dirname(str(shared_library_install[0]))
outfile = build_env["LIBPREFIX"]+build_env["LIBNAME"]+build_env["SHLIBSUFFIX"]+"."+build_env["SOVERSION"]
shlink1 = build_env.Command(outfile,lib_name,"cd "+inst_path+"; ln -s ${SOURCE.file} ${TARGET.file}")
outfile = build_env["LIBPREFIX"]+build_env["LIBNAME"]+build_env["SHLIBSUFFIX"]
shlink2 = build_env.Command(outfile,lib_name,"cd "+inst_path+"; ln -s ${SOURCE.file} ${TARGET.file}")

pkgc_inst = build_env.Install(path.join(lib_inst_path,"pkgconfig"),[pkg_config_file])
incpniutils_inst = build_env.Install(hdr_inst_path,Glob("*.hpp"))

build_env.Alias("install",[shared_library_install,static_library_install,
                           incpniutils_inst,pkgc_inst,shlink1,shlink2])
