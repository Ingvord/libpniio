from os import path

Import("build_env")

#collect source files to build the library
src_list = Glob("*.cpp")
src_list.extend(Glob("tiff/*.cpp"))
src_list.extend(Glob("cbf/*.cpp"))
src_list.extend(Glob("nx/*.cpp"));
src_list.extend(Glob("nx/h5/*.cpp"))
src_list.extend(Glob("nx/h5/filters/*.c"))


#compile sources
shared_objects = build_env.SharedObject(src_list)
static_objects = build_env.StaticObject(src_list)

#link the shared library
lib_suffix = build_env["SHLIBSUFFIX"]+"."+build_env["SOVERSION"]+"."+build_env["VERSION"]
temp_shared_library = build_env.SharedLibrary(build_env["LIBNAME"],
                                              shared_objects,
                                              so_version=build_env["SOVERSION"],
                                              SHLIBSUFFIX=lib_suffix+"noperm")
                       
shared_library = build_env.Command("$LIBFULLNAME",temp_shared_library[0],
                 [  Move("$TARGET","$SOURCE"),
                    Chmod("$TARGET",0644)])
shared_library_link = build_env.Command("$LIBLINKNAME",shared_library,
                      "cd src; ln -sf ${SOURCE.file} ${TARGET.file}")
shared_library_so = build_env.Command("$LIBSONAME",shared_library,
                    "cd src; ln -sf ${SOURCE.file} ${TARGET.file}")
                    
#build the static library                    
static_library = build_env.StaticLibrary(build_env["LIBNAME"],static_objects)

#------------------------Package config file creation--------------------------
pkg_config_file = build_env.Substfile(source=["pniio.pc.in"],
				 SUBST_DICT={"@PREFIX@":"$PREFIX","@LIBNAME@":"$LIBNAME",
				             "@VERSION@":"$VERSION",
                             "@INCDIR@":"$INCDIR",
                             "@INCPATH@":"${_CPPINCFLAGS}",
                             "@DEFINES@":"${_CPPDEFFLAGS}",
                             "@LIBPATH@":"${_LIBDIRFLAGS}",
                             "@LIBS@":"${_LIBFLAGS}"})

build_env.AlwaysBuild(pkg_config_file)

#-------------------------some alias targets -----------------------------------
build_env.Alias("all",[temp_shared_library,shared_library,static_library,
                       shared_library_link,shared_library_so])
                       
build_env.Alias("library",[temp_shared_library,shared_library,static_library,
                           shared_library_link,shared_library_so])
                           
#--------------------------Installation targets--------------------------------

shared_library_install = build_env.Install("$LIBDIR",[shared_library])
shared_library_link_install = build_env.Command("${SOURCE.dir}/$LIBLINKNAME",shared_library_install,
             "cd ${TARGET.dir}; ln -sf ${SOURCE.file} ${TARGET.file}")
shared_library_so_install = build_env.Command("${SOURCE.dir}/$LIBSONAME",shared_library_install,
             "cd ${TARGET.dir}; ln -sf ${SOURCE.file} ${TARGET.file}")

static_library_install = build_env.Install("$LIBDIR",[static_library])

pkgc_inst = build_env.Install(path.join(build_env["LIBDIR"],"pkgconfig"),[pkg_config_file])

#-----------------------install header files-----------------------------------
hdr_inst_path = path.join(build_env["INCDIR"],"pni/io/")
build_env.Alias("install",build_env.Install(hdr_inst_path,Glob("*.hpp")))
build_env.Alias("install",build_env.Install(path.join(hdr_inst_path,"tiff"),Glob("tiff/*.hpp")))
build_env.Alias("install",build_env.Install(path.join(hdr_inst_path,"cbf"),Glob("cbf/*.hpp")))
build_env.Alias("install",build_env.Install(path.join(hdr_inst_path,"parsers"),Glob("parsers/*.hpp")))

build_env.Alias("install",build_env.Install(path.join(hdr_inst_path,"nx"),Glob("nx/*.hpp")))
build_env.Alias("install",build_env.Install(path.join(hdr_inst_path,"nx/h5"),Glob("nx/h5/*.hpp")))
build_env.Alias("install",build_env.Install(path.join(hdr_inst_path,"nx/h5/filters"),Glob("nx/h5/filters/*.h")))


build_env.Alias("install",[shared_library_install,static_library_install,
                           shared_library_link_install,shared_library_so_install,
                           pkgc_inst])
