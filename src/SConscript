from os import path

Import("build_env")
src_list = ["NXExceptions.cpp","NXDateTime.cpp"]

#compile sources
shared_objects = build_env.SharedObject(src_list)
static_objects = build_env.StaticObject(src_list)

#get code for the HDF5 implementation
(h5_shared_objects,h5_static_objects) = build_env.SConscript("h5/SConscript")
shared_objects.append(h5_shared_objects)
static_objects.append(h5_static_objects)

#create base classes
#(bc_shared_objects,bc_static_objects) = build_env.SConscript("base_classes/SConscript")
#shared_objects.append(bc_shared_objects)
#static_objects.append(bc_static_objects)

#link the shared library
lib_suffix = build_env["SHLIBSUFFIX"]+"."+build_env["SOVERSION"]+"."+build_env["VERSION"]
temp_shared_library = build_env.SharedLibrary(build_env["LIBNAME"],
                                              shared_objects,
                                              so_version=build_env["SOVERSION"],
                                              SHLIBSUFFIX=lib_suffix+"noperm")
                       
shared_library = build_env.Command("$LIBFULLNAME",temp_shared_library[0],
                 [  Move("$TARGET","$SOURCE"),
                    Chmod("$TARGET",0644)])
shared_library_link = build_env.Command("$LIBLINKNAME",shared_library,
                      "cd src; ln -sf ${SOURCE.file} ${TARGET.file}")
shared_library_so = build_env.Command("$LIBSONAME",shared_library,
                    "cd src; ln -sf ${SOURCE.file} ${TARGET.file}")
                    
#build the static library                    
static_library = build_env.StaticLibrary(build_env["LIBNAME"],static_objects)

#------------------------Package config file creation--------------------------
pkg_config_file = build_env.Substfile(source=["pninx.pc.in"],
				 SUBST_DICT={"@PREFIX@":"$PREFIX","@LIBNAME@":"$LIBNAME",
				             "@VERSION@":"$VERSION"})

#-------------------------some alias targets -----------------------------------
build_env.Alias("all",[temp_shared_library,shared_library,static_library,
                       shared_library_link,shared_library_so])
                       
build_env.Alias("library",[temp_shared_library,shared_library,static_library,
                           shared_library_link,shared_library_so])
                           
#--------------------------Installation targets--------------------------------
hdr_inst_path = path.join(build_env["PREFIX"],"include/pni/nx")

shared_library_install = build_env.Install("$LIBDIR",[shared_library])
shared_library_link_install = build_env.Command("${SOURCE.dir}/$LIBLINKNAME",shared_library_install,
             "cd ${TARGET.dir}; ln -sf ${SOURCE.file} ${TARGET.file}")
shared_library_so_install = build_env.Command("${SOURCE.dir}/$LIBSONAME",shared_library_install,
             "cd ${TARGET.dir}; ln -sf ${SOURCE.file} ${TARGET.file}")

static_library_install = build_env.Install("$LIBDIR",[static_library])

pkgc_inst = build_env.Install(path.join(build_env["LIBDIR"],"pkgconfig"),[pkg_config_file])
incpniutils_inst = build_env.Install(hdr_inst_path,Glob("*.hpp"))

build_env.Alias("install",[shared_library_install,static_library_install,
                           shared_library_link_install,shared_library_so_install,
                           incpniutils_inst,pkgc_inst])
