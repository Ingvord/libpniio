#include <boost/test/unit_test.hpp>
#include <boost/test/floating_point_comparison.hpp>
#include <pni/io/nx/nx.hpp>
#include <pni/io/nx/xml/node.hpp>
#include <pni/core/types.hpp>
#include <pni/io/nx/algorithms/create_group.hpp>
#include <pni/io/nx/algorithms/close.hpp>
#include <pni/io/nx/algorithms/write.hpp>
#include <pni/io/nx/algorithms/create_attribute.hpp>
#include <complex>
#include "attr_utils.hpp"
#include "../../base_fixture.hpp"
#include "../xml_base_fixture.hpp"

using namespace pni::core;
using namespace pni::io::nx; 

struct array_attr_@TYPE@_fixture : base_fixture,xml_base_fixture
{
    array_attr_@TYPE@_fixture():
        base_fixture("array_attribute_test_@TYPE@.nxs"),
        xml_base_fixture()
    {}
};

static const string xml_@TYPE@_file="array_attribute_test_@TYPE@.xml";

BOOST_FIXTURE_TEST_SUITE(array_attribute_test_@TYPE@,array_attr_@TYPE@_fixture)


    BOOST_AUTO_TEST_CASE(test_inquery)
    {
        typedef std::vector<@TYPE@> array_type;
        BOOST_CHECK_NO_THROW(root_node = xml::create_from_file(xml_@TYPE@_file));
        BOOST_CHECK_NO_THROW(child_node = root_node.get_child("group.attribute"));
        
        BOOST_CHECK_EQUAL(xml_test::attr::size(child_node),3);
        BOOST_CHECK_EQUAL(xml_test::attr::rank(child_node),1);
        BOOST_CHECK_EQUAL(xml_test::attr::type_id(child_node),type_id_t::@TYPEID@);
       
        array_type r{@CPP_DATA@};
        array_type data;
        xml_test::attr::data_from_xml(child_node,data);

        for(auto r_iter = r.begin(),d_iter = data.begin(); 
            d_iter != data.end();
            ++d_iter,++r_iter)
        {
            @EQUALITY_CHECK@
        }
    }

    //-------------------------------------------------------------------------
    BOOST_AUTO_TEST_CASE(test_create_object)
    {
        BOOST_CHECK_NO_THROW(root_node = xml::create_from_file(xml_@TYPE@_file));
        BOOST_CHECK_NO_THROW(child_node = root_node.get_child("group.attribute"));

        //attach the attribute to the group
        h5::nxattribute attr = xml_test::attr::object_from_xml(h5::nxobject(root),child_node);

        BOOST_CHECK_EQUAL(attr.size(),3);
        BOOST_CHECK_EQUAL(attr.rank(),1);
        BOOST_CHECK_EQUAL(attr.type_id(),type_id_t::@TYPEID@);
    }

    //-------------------------------------------------------------------------
    BOOST_AUTO_TEST_CASE(test_from_object)
    {
        using namespace pni::io::nx::xml;
        typedef std::vector<@TYPE@> array_type;
       
        h5::nxobject attr = root.attributes.create<@TYPE@>("attr_data",shape_t{{3}});
        array_type r{@CPP_DATA@};
        BOOST_CHECK_NO_THROW(write(attr,r));

        root_node.add_child("group",xml::group::object_to_xml(h5::nxobject(root)));
        xml::node attr_node = xml_test::attr::object_to_xml(attr);
        xml_test::attr::data_to_xml(r,attr_node);
        child_node = root_node.add_child("group.attribute",attr_node);

        BOOST_CHECK_EQUAL(xml_test::attr::size(child_node),3);
        BOOST_CHECK_EQUAL(xml_test::attr::rank(child_node),1);
        BOOST_CHECK_EQUAL(xml_test::attr::type_id(child_node),type_id_t::@TYPEID@);

    }

BOOST_AUTO_TEST_SUITE_END()
