Import("build_env")

#create rules file
rules_source = ["%:","\tdh $@",""]


#start with the generation of the control file
control_source = ["Source: ${'$LIBPREFIX'+'$LIBNAME'}" ,
                  "Priority: extra",
                  "Maintainer: $MAINTAINER <$MAINTAINER_MAIL>",
                  "Build-Depends: debhelper (>= 7.0.50~)",
                  "Standards-Version: 3.9.1",
                  "Section: libs",
                  "Homepage: http://www.eugen-wintersberger.desy.de/libpninx",
                  "",
                  "Package: ${PKGNAMEROOT}-dev",
                  "Section: libdevel",
                  "Architecture: any",
                  "Depends: ${PKGNAMEROOT} (= $${binary:Version})",
                  "Description: PNI Nexus library - developer package",
                  " Provides header files and static libraries necessary to write code", 
                  " using the PNI Nexus library.",
                  "",
                  "Package: ${PKGNAMEROOT}",
                  "Section: libs",
                  "Architecture: any",
                  "Depends: ${PKGNAMEROOT} (=$${binary:Version}),$${shlibs:Depends}, $${misc:Depends}",
                  "Description: PNI Nexus library",
                  " PNI Nexus libray. ",
                  "",
                  "Package: ${PKGNAMEROOT}-doc",
                  "Section: doc",
                  "Architecture: any",
                  "Depends:",
                  "Description: PNI Nexus library - documentation",
                  " Documentation for the PNI Nexus library."]
                  
control_file = build_env.Textfile(target="control",source=control_source,
                                  TEXTFILESUFFIX="")
build_env.NoClean(control_file)

changelog_source = [ "libpninx (${VERSION}) unstable; urgency=low",
                     "",
                     "  * Initial Release.",
                     " -- ${MAINTAINER} <${MAINTAINER_MAIL}>  Tue, 24 May 2011 11:15:08 +0200",
                     ""]
changelog_file = build_env.Textfile(target="changelog",source=changelog_source,
                                    TEXTFILESUFFIX="")                                  
build_env.NoClean(changelog_file)

rules_file = build_env.Textfile(target="rules",source=rules_source,
                                TEXTFILESUFFIX="")
build_env.NoClean(rules_file)

compat_file = build_env.Textfile(target="compat",source=["7"],TEXTFILESUFFIX="")
build_env.NoClean(compat_file)

lib_pkg_dirs = build_env.Textfile(target="${PKGNAMEROOT}",
               source=["${LIBINSTPATH}"],TEXTFILESUFFIX=".dirs")
build_env.NoClean(lib_pkg_dirs)
lib_pkg_install = build_env.Textfile(target="${PKGNAMEROOT}",
                  source=["${LIBINSTPATH}/lib*.so.*"],TEXTFILESUFFIX=".install")
build_env.NoClean(lib_pkg_install)

dev_pkg_dirs = build_env.Textfile(target="${PKGNAMEROOT}-dev",
               source=["${LIBINSTPATH}","${INCINSTPATH}"],
               TEXTFILESUFFIX=".dirs")
build_env.NoClean(dev_pkg_dirs)
dev_pkg_install = build_env.Textfile(target="${PKGNAMEROOT}-dev",
                  source=["${INCINSTPATH}/*",
                          "${LIBINSTPATH}/lib*.a","usr/lib/lib*.so",
                          "${LIBINSTPATH}/pkgconfig/*"],
                  TEXTFILESUFFIX=".install")
build_env.NoClean(dev_pkg_install)                                                               

doc_pkg_dirs = build_env.Textfile(target="${PKGNAMEROOT}-doc",
                                  source=["${DOCDIR}"],TEXTFILESUFFIX=".dirs")
build_env.NoClean(doc_pkg_dirs)                                                                      
doc_pkg_install = build_env.Textfile(target="${PKGNAMEROOT}-doc",
                                     source=["${DOCDIR}/*"],
                                     TEXTFILESUFFIX=".install")
build_env.NoClean(doc_pkg_install)

build_env.Alias("debian",[control_file,compat_file,lib_pkg_dirs,lib_pkg_install,
                          dev_pkg_dirs,dev_pkg_install,
                          doc_pkg_dirs,doc_pkg_install,changelog_file,rules_file])
