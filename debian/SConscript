Import("build_env")

from smod import DebChangelogFile
import platform

debian_dict = {"@SOURCE@":"$LIBPREFIX$LIBNAME","@MAINTAINER@":"$MAINTAINER",
               "@MAINTAINER_MAIL@":"$MAINTAINER_MAIL",
               "@PKGNAME@":"$PKGNAME","@VERSION@":"$VERSION",
               "@LIBINSTPATH@":"$LIBINSTPATH","@INCINSTPATH@":"$INCINSTPATH",
               "@DOCDIR@":"$DOCDIR"}
               
#-------------------------create control file-----------------------------------
                  
control_file = build_env.Substfile(["control.in"],SUBST_DICT=debian_dict)

changelog = DebChangelogFile("../","v0.0.1")
changelog.version=build_env["VERSION"]
changelog.pkg_name = build_env["LIBPREFIX"]+build_env["LIBNAME"]
changelog.urgency = "low"
changelog.distribution = "testing"
changelog.create("changelog.in")
changelog_file = build_env.Substfile(["changelog.in"])                                  

rules_file = build_env.Substfile(["rules.in"])

compat_file = build_env.Substfile(["compat.in"])

lib_pkg_dirs = build_env.Substfile(target="${PKGNAME}",
                source=["libpninx.dirs.in"],SUBST_DICT=debian_dict,
                SUBSTFILESUFFIX=".dirs")

lib_pkg_install = build_env.Substfile(target="${PKGNAME}",
                  source=["libpninx.install.in"],SUBST_DICT=debian_dict,
                  SUBSTFILESUFFIX=".install")

dev_pkg_dirs = build_env.Substfile(target="${PKGNAME}-dev",
               source = ["libpninx-dev.dirs.in"],
               SUBST_DICT=debian_dict,SUBSTFILESUFFIX=".dirs")

dev_pkg_install = build_env.Substfile(target="${PKGNAME}-dev",
                  source=["libpninx-dev.install.in"],SUBST_DICT=debian_dict,
                  SUBSTFILESUFFIX=".install")

doc_pkg_dirs = build_env.Substfile(target="${PKGNAME}-doc",
                                  source=["libpninx-doc.dirs.in"],
                                  SUBST_DICT=debian_dict,SUBSTFILESUFFIX=".dirs")

doc_pkg_install = build_env.Substfile(target="${PKGNAME}-doc",
                                     source=["libpninx-doc.install.in"],
                                     SUBST_DICT=debian_dict,
                                     SUBSTFILESUFFIX=".install")

debian_makefile = build_env.Substfile(target="../Makefile",source="DebianMakefile.in",
                                      SUBST_DICT={"@PREFIX@":"$PREFIX"},
                                      SUBSTFILESUFFIX="")                                    

debian_config = [control_file,compat_file,lib_pkg_dirs,lib_pkg_install,
                 dev_pkg_dirs,dev_pkg_install,doc_pkg_dirs,doc_pkg_install,
                 changelog_file,rules_file,debian_makefile]
                 
architecture_map = {"x86_64":"amd64","amd64":"amd64","i386":"i386","x86":"i386"}
                          
#generate package names
arch = architecture_map[platform.machine()]
pkg_list = []
pkg_list += build_env.subst("$PKGNAME")+"-dev_"+build_env.subst("$VERSION")+"_"+arch+".deb"
pkg_list += build_env.subst("$PKGNAME")+"-doc_"+build_env.subst("$VERSION")+"_"+arch+".deb"
pkg_list += build_env.subst("$PKGNAME")+"_"+build_env.subst("$VERSION")+"_"+arch+".deb"

debian_packages = build_env.Command(pkg_list,debian_config,"dpkg-buildpackage -uc -us -b")
debian = build_env.Alias("debian",[debian_packages])

build_env.Clean(debian,"tmp")
build_env.Clean(debian,Glob("*.log"))
build_env.Clean(debian,Glob("*.substvars"))
build_env.Clean(debian,Glob("*.debhelper"))
build_env.Clean(debian,"${PKGNAME}")
build_env.Clean(debian,"${PKGNAME}-dev")
build_env.Clean(debian,"${PKGNAME}-doc")
build_env.Clean(debian,"files")

                        
 